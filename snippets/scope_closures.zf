#### noop: summary
# Robert says about scope, for langs that use explicit variable declarations:
#
# Lexical scoping means that you can figure out which declaration a
# variable name refers to just by reading the text of the program.
#
# A variable usage refers to the preceding declaration with the same
# name in the innermost scope that encloses the expression where the
# variable is used.
#
# But Zoof uses implicit declarations. We still have the same rules, since
# the first setting of a variable is its (implicit) declaration, but it makes
# sense to reformulate it a bit:
#
# Lexical scoping means that you can figure out which variable a
# variable name refers to just by reading the text of the program.
#
# A variable name refers to the variable (with that name) that was set
# earlier in the code, in the innermost scope that encloses the
# expression where the variable is used.
#
# In Robert's formulation, closures must capture free variables by
# reference. In Crafting Interpreters this is implemented by storing
# the complete enclosing environment. Python follows the same rules,
# but manages to pick out only the variables that need to be stored
# using another level of indirection, using cells.
#
# Not sure yet what to do with Zoof.
#
# Capturing free variables by value is *a lot* easier to implement, and
# has some advantages too, like being able to create closures with
# different free variable values in a loop. It feels pretty natural (to
# me), since the closure cannot change the free variable's value anyway
# (we have no nonlocal keyword). Users can create mutable state by using
# a struct. The major downside is the difference in behavior of globals vs nonlocals.
#
# I decided to only allow closures using globals for now, no free
# variable scope capturing, until we figure out how to implement all
# this in Wasm.
#### end (no output)



#### exec: not a closure 1
# Just to be clear, a function is only a closure when it is called from
# another scope as the one in which it is defined and captures free variables.
func outer() do
    a = 1
    func printa() do  # not a closure!
        print a
    printa()
    a = 2
    printa()
outer()
#### output
1.0
2.0
#### end



#### exec: not a closure 2
# Called in different scope, but function does not capture free variables.
func outer() do
    func printer(a) do  # not a closure!
        print a
    return printer
p = outer()
p(1)
p(2)
#### output
1.0
2.0
#### end



#### exec: closure 1
# Free variables are captured ... duno yet
func outer() do
    a = 1
    func inner() do
        print a
    a = 2
    return inner
f = outer()
f()
#### output
In 'snippet', line 5
RuntimeError: Closures are not supported at the moment. at 'a' (Identifier)

5|         print a
                 ^
#### end



#### exec: closure 2 - translation of Robert's adversary snippet
# todo: Not sure yet what to do here!
a = 'global'
func main() do
  func showA() do
    print a

  showA()
  a = 'block'
  showA()
main()
#### output
'global'
'global'
#### end



#### exec: closure 3
# todo: need lists for this
func outer() do
    funcs = []
    for i in 0..5 do
        funcs.put(func() i)
    return funcs

ff = outer()
for f in ff do
    print f()  # prints 0 1 2 3 4
#### end (missing expected output)



#### exec: counter
# Zoof cannot set variables in outer scopes. Use a struct!
# todo: we don't have struct-like objects yet
func makeCounter() do
  i = 0
  func count() do
    i = i + 1
    print i
  return count

counter = makeCounter()
counter()
counter()
counter()
#### end (missing expected output)



#### exec: technically not a closure
a = 0  # just to make it more interesting
func make() do
  # imagine writing this code on module level, then wrapping it in a function.
  # we want this to Just Work!
  a = 2
  func foo() do
     print a
  foo()
  a = 3
  foo()
make()
#### output
2.0
3.0
#### end



#### exec: now it is
a = 0
func make() do
  a = 2
  func foo() do
     print a
  foo()
  a = 3
  foo()
  return foo
f = make()
f()
#### output
2.0
3.0
In 'snippet', line 5
RuntimeError: Closures are not supported at the moment. at 'a' (Identifier)

5|      print a
              ^
#### end



#### exec: fail because of early reference
a = 0
func make() do
  func foo() do
     print a
  a = 2
  foo()
  a = 3
  foo()
make()
# this must fail! I think, also See Roberts snippet above
#### end (missing expected output)



#### exec: but works again if we remove the global that was shadowed
func make() do
  func foo() do
     print a
  a = 2
  foo()
  a = 3
  foo()
make()
#### output
2.0
3.0
#### end



#### exec: deep closures 1
a = 0
func make1() do
  b = 1
  func make2() do
    c = 2
    func foo() do
      print a
      print b
      print c
    c = 20
    return foo
  f = make2()
  b = 10
  return f
f = make1()
a = 42
f()
#### output
In 'snippet', line 9
RuntimeError: Closures are not supported at the moment. at 'c' (Identifier)

9|       print c
               ^
#### end



#### exec: deep closures 1
a = 0
func make1() do
  a = 1
  func make2() do
    a = 2
    func foo() do
      print a
    return foo
  return make2()
f = make1()
f()
#### output
In 'snippet', line 7
RuntimeError: Closures are not supported at the moment. at 'a' (Identifier)

7|       print a
               ^
#### end




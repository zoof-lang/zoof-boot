#### noop: summary
# A variable name refers to the object that was last assigned to that
# name in the innermost scope that encloses the expression where the
# variable name is used.
#
# See scope_closures.zf for details.
#### end (no output)



#### exec: simple 1
a = b = 1
print(a)
print(b)
#### output
1.0
1.0
#### end



#### exec: global 1
a = 1
func foo() do
  print(a)
foo()
#### output
1.0
#### end



#### exec: global 2
# Supporting this is very convenient for mutually dependent stuff
# todo: also support this when executing the pieces separately
func foo() do
  print(a)
a = 1
foo()
#### output
1.0
#### end



#### exec: global and local
a = 1
func foo() do
  b = 2
  print(a)
  print(b)
foo()
#### output
1.0
2.0
#### end



#### exec: global, local, local 1
a = 1
func foo() do
  b = 2
  func bar() do
    c = 3
    print(a)
    print(b)
    print(c)
  bar()
foo()
#### output
1.0
2.0
3.0
#### end



#### exec: global, local, local 2
func foo() do
  func bar() do
    c = 3
    print(a)
    print(b)
    print(c)
  b = 2
  bar()
a = 1
foo()
#### output
1.0
2.0
3.0
#### end



#### exec: func, shadowing
a = 1
func foo() do
  a = 2
  print(a)
foo()
#### output
2.0
#### end



#### exec: fail notexist 1
a
#### output
-- NameError (E2359) ------------------------------------------------- snippet:1

Undefined variable.

1| a
   ^
This variable name is used before it is defined.
#### end



#### exec: fail notexist 2
a = 1
c = b
#### output
-- NameError (E2359) ------------------------------------------------- snippet:2

Undefined variable.

2| c = b
       ^
This variable name is used before it is defined.
#### end



#### exec: fail notexist in func
func foo() do
  print(b)
foo()
#### output
-- NameError (E2359) ------------------------------------------------- snippet:2

Undefined variable.

2|   print(b)
           ^
This variable name is used before it is defined.
#### end



#### exec: fail notexist un uncalled func
# todo: I think we may want to make this work at some point?
# Maybe only for procedures, not for funcs?
func foo() do
  print(b)
#### output
-- NameError (E2359) ------------------------------------------------- snippet:4

Undefined variable.

4|   print(b)
           ^
This variable name is used before it is defined.
#### end



#### exec: fail notexist in sub-func
func foo() do
  func bar() do
    print(b)
  bar()
foo()
#### output
-- NameError (E2359) ------------------------------------------------- snippet:3

Undefined variable.

3|     print(b)
             ^
This variable name is used before it is defined.
#### end



#### exec: fail notexist in uncalled subfunc
func foo() do
  func bar() do
    print(b)
foo()
#### output
-- NameError (E2359) ------------------------------------------------- snippet:3

Undefined variable.

3|     print(b)
             ^
This variable name is used before it is defined.
#### end



#### exec: func, shadowing only allowed fully
a = 1
func foo() do
  print(a)
  a = 2
  print(a)
#### output
-- NameError (E2446) ------------------------------------------------- snippet:3

Variable is used before it's declared in this scope.

3|   print(a)
           ^
There is a variable in an outer scope with the same name,
but it is also defined later in the current scope (i.e. shadowed).
You must either rename the latter, to avoid shadowing, or define
the local variable before it is used here.
#### end




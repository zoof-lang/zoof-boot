#### exec: the compiler helps - fail
func
#### output
-- SyntaxError (E1110) ----------------------------------------------- snippet:1

Found a lonely 'func' keyword.

1| func
   ^^^^

The syntax for creating functions has two forms. The (multi-line) statement form, e.g.:

    func foo() do
        print 'hello!'

And the (single-line) expression form, e.g.:

    foo = func() its 'hello!'
#### end



#### exec: simple
func foo(a, b) do
    return a + b

print foo(40, 2)
#### output
42.0
#### end



#### exec: simple no return
func foo(a, b) do
    a + b

print foo(40, 2)
#### output
nil
#### end



#### exec: returns
func islargerthan5(a) do
    if a > 5 do
        return true
    else
        return false

print islargerthan5(3)
print islargerthan5(6)
#### output
false
true
#### end



#### exec: fibonacci
func fib(n) do
  if n <= 1 do
      return n
  return fib(n - 2) + fib(n - 1)

for i in 0:10 do
  print fib(i)
#### output
0.0
1.0
1.0
2.0
3.0
5.0
8.0
13.0
21.0
34.0
#### end



#### exec: lambda 1
foo = func (a, b) its a + b
print foo(2, 9)
#### output
11.0
#### end



#### exec: lambda 2
a = 100
foo = func (b) its a + b
print foo(9)
#### output
109.0
#### end



#### exec: lambda 4
# This lambda starts out as a statement, so the code path is a bit different.
# Not very useful, but in a repl it will be printed, and maybe we'll something
# like Python's '_' to get the last result.
func () its 42
nil  # cannot print function object, as it has an id that'd change all the time.
#### output

#### end



#### exec: lambda direct call 1
print (func () its 42)()
#### output
42.0
#### end



#### exec: lambda direct call 2
print (func () its (func () its 42))()()
#### output
42.0
#### end



#### exec: lambda with if-expression
f = func () its (if false its 3 else 4)
f()
#### output
4.0
#### end



#### exec: func statement needs a name - fail
func (a) do
  print(a)
#### output
-- SyntaxError (E1959) ----------------------------------------------- snippet:1

Expected func name.

1| func (a) do
   ^^^^
Lambda's (function expressions) can be anonymous, but normal functions cannot.
#### end



#### exec: lambda must be on one line - fail
f = func () its
  3
#### output
-- SyntaxError (E1449) ----------------------------------------------- snippet:2

A function expression must be on a single line.

1| f = func () its
2|   3
   ^^
You should probably move the function's body directly after 'its'.
#### end



#### exec: lambda must not have a name 1 - fail
f = func foo () its 3
#### output
-- SyntaxError (E1862) ----------------------------------------------- snippet:1

Function expressions cannot have a name.

1| f = func foo () its 3
            ^^^
The expression form of function definitions are anonymous (a.ka. lambdas).
The name must be omitted.
#### end



#### exec: lambda must not have a name 2 - fail
f = func 3 () its 3
#### output
-- SyntaxError (E1783) ----------------------------------------------- snippet:1

Expected '(' directly after 'func' in expression-form.

1| f = func 3 () its 3
            ^

The syntax for creating functions has two forms. The (multi-line) statement form, e.g.:

    func foo() do
        print 'hello!'

And the (single-line) expression form, e.g.:

    foo = func() its 'hello!'
#### end



#### exec: lambda with if-expression needs parentheses - fail
f = func () its if false its 3 else 4
f()
#### output
-- SyntaxError (E1321) ----------------------------------------------- snippet:1

This if-expression is not allowed here.

1| f = func () its if false its 3 else 4
                   ^^^^^^^^^^^^^^^^^^^^^
To keep code readable, you must wrap it in parentheses: `(...)`.
#### end



#### exec: lambda 3 - fail
# It's harder to track when a lambda is called in the same scope,
# so we don't support late binding for lambdas
foo = func (b) its a + b
a = 100
print foo(9)
#### output
-- NameError (E2359) ------------------------------------------------- snippet:3

Undefined variable.

3| foo = func (b) its a + b
                      ^
This variable name is used before it is defined.
#### end



#### exec: func need do or its - fail
func foo() not
   nil
#### output
-- SyntaxError (E1653) ----------------------------------------------- snippet:1

Expected 'do' or 'its' after func signature.

1| func foo() not
              ^^^
#### end



#### exec: lambda needs its - fail
f = func () do 3
#### output
-- SyntaxError (E1074) ----------------------------------------------- snippet:1

Expected 'its' after signature of anonynous function

1| f = func () do 3
               ^^
#### end



#### exec: need params - fail
func foo do
  return 42
#### output
-- SyntaxError (E1286) ----------------------------------------------- snippet:1

Expected '(' to start func signature.

1| func foo do
            ^^

The syntax for creating functions has two forms. The (multi-line) statement form, e.g.:

    func foo() do
        print 'hello!'

And the (single-line) expression form, e.g.:

    foo = func() its 'hello!'
#### end



#### noop: summary
# See scope_closures.zf for functions that capture free variables.
#### end (no output)




#### noop: summary
# This module tests/shows traits
#### end (no output)



#### exec: simplest trait ever
trait TFoo
    nil

print TFoo
#### output
<Trait TFoo with 0 methods, 0 getters, 0 setters>
#### end



#### exec: Can always implement simple trait
trait TFoo
    nil

struct Bar
    func new() its This()

impl TFoo for Bar
    nil

b = Bar.new() as TFoo
#### output
<Bar-as-TFoo instance with 0 methods, 0 getters, 0 setters>
#### end



#### exec: Real trait impl example

trait TLength
    abstract getter length()

    method showLength() do
        print 'length is '
        print this.length


struct Vector

    x F64
    y F64

    func new(x, y) do
        return This(x, y)

    getter x() its this..x
    setter x(v) do
        this..x = v

    getter y() its this..y
    setter y(v) do
        this..y = v


impl TLength for Vector
    getter length() its (this..x^2 + this..y^2) ^ 0.5


v = Vector.new(3, 4) as TLength
v.showLength()
v.x = 5
v.showLength()
#### output
'length is '
5.0
'length is '
6.4031242374328485
#### end



#### exec: Struct inherits trait

trait TLength
    abstract getter length()

    method showLength() do
        print 'length is '
        print this.length


struct Vector from TLength

    x F64
    y F64

    func new(x, y) do
        return This(x, y)

    getter x() its this..x
    setter x(v) do
        this..x = v

    getter y() its this..y
    setter y(v) do
        this..y = v

    getter length() its (this..x^2 + this..y^2) ^ 0.5

# No need to cast to TLength
v = Vector.new(3, 4)
v.showLength()
v.x = 5
v.showLength()

# But casting is posisble!
v2 = v as TLength
v2.showLength()
#### output
'length is '
5.0
'length is '
6.4031242374328485
'length is '
6.4031242374328485
#### end



#### exec: the expression problem

# -- api.zf

trait TSave
    abstract method save()

trait TToPdf
    abstract method toPdf()


# -- text.zf

struct TextDocument
    func new() its This()
    # Imagine extensive methods here


impl TSave for TextDocument
    method save() do
        print 'Saving text doc!'


impl TToPdf for TextDocument
    method toPdf() do
        print 'Converting text to pdf!'


# -- spreadsheet.zf

struct SpreadSheetDocument
    func new() its This()
    # Imagine extensive methods here


impl TSave for SpreadSheetDocument
    method save() do
        print 'Saving spreadsheet doc!'


impl TToPdf for SpreadSheetDocument
    method toPdf() do
        print 'Converting spreadsheet to pdf!'


# -- app.zf

# Two docs, they could be any kind of document, from this code p.o.v.
doc1 = TextDocument.new()
doc2 = SpreadSheetDocument.new()

func saveDoc(doc) do
    # Note: eventually the cast will not be necessary if we annotate the doc param to be a TSave
    (doc as TSave).save()

func docToPdf(doc) do
    (doc as TToPdf).toPdf()

saveDoc(doc1)
saveDoc(doc2)
docToPdf(doc1)
docToPdf(doc2)

#### expected output

#### actual output
'Saving text doc!'
'Saving spreadsheet doc!'
'Converting text to pdf!'
'Converting spreadsheet to pdf!'
#### end




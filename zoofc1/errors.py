class ErrorHandler:
    def __init__(self):
        self.lines = []
        self.hadSyntaxError = False
        self.hadRuntimeError = False

    def setSourceLines(self, lines):
        self.lines = lines

    def syntaxError(self, token, message):
        """An error due to invalid syntax."""
        self.hadSyntaxError = True
        self._show_error(token, "SyntaxError: " + message)

    def analysisError(self, token, message):
        """An error generated by analysing the code."""
        self._show_error(token, "TypeError: " + message)

    def runtimeError(self, token, message):
        """An error generated at runtime."""
        # print(f"[line {token.line}] Error : {message}")
        self.hadRuntimeError = True
        self._show_error(token, "RuntimeError: " + message)

    def _show_error(self, token, message):
        tokenName = str(token.type).split(".")[-1]
        prefix = f"{token.line}| "
        squigle = "^" * len(token.lexeme)
        print(message + f" at {repr(token.lexeme)} ({tokenName})")
        print()
        print(prefix + self.lines[token.line - 1])
        print(" " * (len(prefix) + token.column - 1) + squigle)
